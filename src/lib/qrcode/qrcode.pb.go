// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qrcode.proto

package qrcode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type URL struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URL) Reset()         { *m = URL{} }
func (m *URL) String() string { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()    {}
func (*URL) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb23194701eb96f, []int{0}
}

func (m *URL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URL.Unmarshal(m, b)
}
func (m *URL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URL.Marshal(b, m, deterministic)
}
func (m *URL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URL.Merge(m, src)
}
func (m *URL) XXX_Size() int {
	return xxx_messageInfo_URL.Size(m)
}
func (m *URL) XXX_DiscardUnknown() {
	xxx_messageInfo_URL.DiscardUnknown(m)
}

var xxx_messageInfo_URL proto.InternalMessageInfo

func (m *URL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type QRCode struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Image                []byte   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QRCode) Reset()         { *m = QRCode{} }
func (m *QRCode) String() string { return proto.CompactTextString(m) }
func (*QRCode) ProtoMessage()    {}
func (*QRCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb23194701eb96f, []int{1}
}

func (m *QRCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCode.Unmarshal(m, b)
}
func (m *QRCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCode.Marshal(b, m, deterministic)
}
func (m *QRCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCode.Merge(m, src)
}
func (m *QRCode) XXX_Size() int {
	return xxx_messageInfo_QRCode.Size(m)
}
func (m *QRCode) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCode.DiscardUnknown(m)
}

var xxx_messageInfo_QRCode proto.InternalMessageInfo

func (m *QRCode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QRCode) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QRCode) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type QRCodeList struct {
	QRCodes              []*QRCode `protobuf:"bytes,1,rep,name=QRCodes,proto3" json:"QRCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QRCodeList) Reset()         { *m = QRCodeList{} }
func (m *QRCodeList) String() string { return proto.CompactTextString(m) }
func (*QRCodeList) ProtoMessage()    {}
func (*QRCodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb23194701eb96f, []int{2}
}

func (m *QRCodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCodeList.Unmarshal(m, b)
}
func (m *QRCodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCodeList.Marshal(b, m, deterministic)
}
func (m *QRCodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeList.Merge(m, src)
}
func (m *QRCodeList) XXX_Size() int {
	return xxx_messageInfo_QRCodeList.Size(m)
}
func (m *QRCodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeList.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeList proto.InternalMessageInfo

func (m *QRCodeList) GetQRCodes() []*QRCode {
	if m != nil {
		return m.QRCodes
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb23194701eb96f, []int{3}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*URL)(nil), "qrcode.URL")
	proto.RegisterType((*QRCode)(nil), "qrcode.QRCode")
	proto.RegisterType((*QRCodeList)(nil), "qrcode.QRCodeList")
	proto.RegisterType((*Empty)(nil), "qrcode.Empty")
}

func init() { proto.RegisterFile("qrcode.proto", fileDescriptor_ccb23194701eb96f) }

var fileDescriptor_ccb23194701eb96f = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0xcc, 0x26, 0x34, 0xa5, 0xd3, 0x0f, 0xe4, 0x21, 0x18, 0x7a, 0x0a, 0x7b, 0x90, 0x08, 0x52,
	0xb0, 0x82, 0x67, 0x45, 0xa4, 0x97, 0x5c, 0x5c, 0xc9, 0x0f, 0xa8, 0xdd, 0x87, 0x2c, 0x58, 0x12,
	0xb7, 0xab, 0xe0, 0xef, 0xf3, 0x8f, 0xc9, 0x76, 0xb3, 0x62, 0x0b, 0xbd, 0xed, 0xbc, 0x99, 0x79,
	0x33, 0xfb, 0x30, 0xf9, 0xb0, 0x9b, 0x56, 0xf3, 0xa2, 0xb3, 0xad, 0x6b, 0x29, 0x0f, 0x48, 0x5e,
	0x20, 0x6b, 0x54, 0x4d, 0x67, 0xc8, 0x3e, 0xed, 0x7b, 0x21, 0x4a, 0x51, 0x8d, 0x94, 0x7f, 0xca,
	0x7b, 0xe4, 0xcf, 0xea, 0xb1, 0xd5, 0x4c, 0x33, 0xa4, 0x46, 0xf7, 0x54, 0x6a, 0x74, 0xd4, 0xa6,
	0x7f, 0x5a, 0x3a, 0xc7, 0xc0, 0x6c, 0xd7, 0x6f, 0x5c, 0x64, 0xa5, 0xa8, 0x26, 0x2a, 0x00, 0x79,
	0x07, 0x84, 0x0d, 0xb5, 0xd9, 0x39, 0xaa, 0x30, 0x0c, 0x68, 0x57, 0x88, 0x32, 0xab, 0xc6, 0xcb,
	0xd9, 0xa2, 0x2f, 0x14, 0xc6, 0x2a, 0xd2, 0x72, 0x88, 0xc1, 0xd3, 0xb6, 0x73, 0xdf, 0xcb, 0x1f,
	0x81, 0x69, 0x18, 0xbe, 0xb0, 0xfd, 0x32, 0x1b, 0xa6, 0x4b, 0xe4, 0x2b, 0x76, 0xbe, 0xf0, 0x34,
	0xba, 0xf7, 0xd2, 0xf9, 0x38, 0xc2, 0x46, 0xd5, 0x32, 0xa1, 0x2b, 0x8c, 0x9a, 0x4e, 0xaf, 0x1d,
	0x7b, 0xe9, 0x7f, 0x6e, 0x7e, 0xe8, 0x93, 0x09, 0xdd, 0x00, 0x2b, 0x76, 0x7d, 0xf6, 0xf1, 0x5a,
	0x3a, 0xec, 0xe8, 0x3f, 0x22, 0x13, 0xba, 0x06, 0x1e, 0xb4, 0x3e, 0x61, 0x39, 0x0e, 0x78, 0xcd,
	0xf7, 0x07, 0xbf, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xd5, 0xea, 0xa2, 0x80, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QRCodeServiceClient is the client API for QRCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QRCodeServiceClient interface {
	GetURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*URL, error)
	UpdateURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*Empty, error)
	GetQRCodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QRCodeList, error)
	AddQRCodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type qRCodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewQRCodeServiceClient(cc *grpc.ClientConn) QRCodeServiceClient {
	return &qRCodeServiceClient{cc}
}

func (c *qRCodeServiceClient) GetURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/qrcode.QRCodeService/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRCodeServiceClient) UpdateURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/qrcode.QRCodeService/UpdateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRCodeServiceClient) GetQRCodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QRCodeList, error) {
	out := new(QRCodeList)
	err := c.cc.Invoke(ctx, "/qrcode.QRCodeService/GetQRCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRCodeServiceClient) AddQRCodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/qrcode.QRCodeService/AddQRCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRCodeServiceServer is the server API for QRCodeService service.
type QRCodeServiceServer interface {
	GetURL(context.Context, *Empty) (*URL, error)
	UpdateURL(context.Context, *URL) (*Empty, error)
	GetQRCodes(context.Context, *Empty) (*QRCodeList, error)
	AddQRCodes(context.Context, *Empty) (*Empty, error)
}

func RegisterQRCodeServiceServer(s *grpc.Server, srv QRCodeServiceServer) {
	s.RegisterService(&_QRCodeService_serviceDesc, srv)
}

func _QRCodeService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrcode.QRCodeService/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServiceServer).GetURL(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRCodeService_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServiceServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrcode.QRCodeService/UpdateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServiceServer).UpdateURL(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRCodeService_GetQRCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServiceServer).GetQRCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrcode.QRCodeService/GetQRCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServiceServer).GetQRCodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRCodeService_AddQRCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServiceServer).AddQRCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrcode.QRCodeService/AddQRCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServiceServer).AddQRCodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _QRCodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qrcode.QRCodeService",
	HandlerType: (*QRCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetURL",
			Handler:    _QRCodeService_GetURL_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _QRCodeService_UpdateURL_Handler,
		},
		{
			MethodName: "GetQRCodes",
			Handler:    _QRCodeService_GetQRCodes_Handler,
		},
		{
			MethodName: "AddQRCodes",
			Handler:    _QRCodeService_AddQRCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrcode.proto",
}
